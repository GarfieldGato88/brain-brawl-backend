// update-files.js - Automated file update script for Brain Brawl fixes
const fs = require('fs');
const path = require('path');

console.log('🔧 Brain Brawl - Updating Files for Enhanced Features\n');

// Helper function to backup files
function backupFile(filePath) {
  if (fs.existsSync(filePath)) {
    const backupPath = filePath + '.backup.' + Date.now();
    fs.copyFileSync(filePath, backupPath);
    console.log(`✅ Backed up: ${path.basename(filePath)} → ${path.basename(backupPath)}`);
    return true;
  }
  return false;
}

// Helper function to check if we're in the right directory
function checkDirectory() {
  const hasPackageJson = fs.existsSync('package.json');
  const hasRoutesFolder = fs.existsSync('routes');
  const hasServerJs = fs.existsSync('server.js');
  
  return hasPackageJson && hasRoutesFolder && hasServerJs;
}

async function updateFiles() {
  try {
    console.log('📂 Checking current directory...');
    
    if (!checkDirectory()) {
      console.log('❌ Error: Please run this script from the brain-brawl-backend directory');
      console.log('   Current directory should contain: package.json, routes/, server.js');
      process.exit(1);
    }
    
    console.log('✅ Correct directory detected\n');

    // 1. Update server.js
    console.log('🚀 Step 1: Updating server.js...');
    const serverPath = 'server.js';
    
    if (backupFile(serverPath)) {
      // Create new server.js content (the fixed version)
      const newServerContent = `// Enhanced server.js compatible with new gameSocket.js
require('dotenv').config();
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const { createClient } = require('@supabase/supabase-js');

const app = express();
const server = http.createServer(app);

// CORS configuration
const corsOptions = {
  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
};

// Socket.io setup with CORS
const io = socketIo(server, {
  cors: corsOptions,
  transports: ['websocket', 'polling']
});

// Middleware
app.use(helmet({
  crossOriginEmbedderPolicy: false,
  contentSecurityPolicy: false
}));
app.use(cors(corsOptions));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100,
  message: 'Too many requests from this IP, please try again later.',
  standardHeaders: true,
  legacyHeaders: false
});
app.use('/api/', limiter);

// Test Supabase connection
console.log('🔍 Server.js - Testing Supabase connection...');
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// Test database connection
supabase
  .from('users')
  .select('count', { count: 'exact', head: true })
  .then(({ error, count }) => {
    if (error) {
      console.error('❌ Database connection failed:', error.message);
    } else {
      console.log('✅ Database connection test successful');
      console.log(\`📊 Database: Connected (\${count || 0} users)\`);
    }
  });

// Routes
app.get('/', (req, res) => {
  res.json({
    message: '🧠 Brain Brawl API Server',
    version: '1.7',
    status: 'running',
    features: [
      'Enhanced visual feedback',
      'Educational content system', 
      'Complete game flow',
      'User stats tracking',
      'Proper game ending'
    ],
    endpoints: {
      auth: '/api/auth/*',
      health: '/health'
    },
    socket: 'Socket.io enabled for real-time multiplayer',
    timestamp: new Date().toISOString()
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    timestamp: new Date().toISOString()
  });
});

// Auth routes
try {
  const authRoutes = require('./routes/auth');
  app.use('/api/auth', authRoutes);
  console.log('✅ Auth routes mounted successfully');
} catch (error) {
  console.error('❌ Failed to load auth routes:', error.message);
}

// Socket.io game handler - FIXED
try {
  console.log('🎮 Initializing enhanced game socket handler...');
  
  // Import the game socket handler (it's a function that takes io as parameter)
  const gameSocketHandler = require('./routes/gameSocket');
  
  // Call the function with the io instance
  gameSocketHandler(io);
  
  console.log('✅ Enhanced game socket handler attached successfully');
} catch (error) {
  console.error('❌ Failed to attach game socket handler:', error.message);
  console.error('Stack trace:', error.stack);
}

// Socket.io connection handling
io.on('connection', (socket) => {
  console.log(\`🔌 User connected: \${socket.id}\`);
  
  socket.on('disconnect', (reason) => {
    console.log(\`🔌 User disconnected: \${socket.id} (\${reason})\`);
  });
});

// Global error handlers
process.on('uncaughtException', (error) => {
  console.error('💥 Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('💥 Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('🛑 SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('✅ Server closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('🛑 SIGINT received, shutting down gracefully');
  server.close(() => {
    console.log('✅ Server closed');
    process.exit(0);
  });
});

// Start server
const PORT = process.env.PORT || 5000;
const NODE_ENV = process.env.NODE_ENV || 'development';

server.listen(PORT, () => {
  console.log('\\n🚀 Brain Brawl server running on port', PORT);
  console.log('🎮 Socket.io ready for multiplayer battles!');
  console.log('📍 Environment:', NODE_ENV);
  console.log('🌐 Server URL: http://localhost:' + PORT);
  
  if (NODE_ENV === 'development') {
    console.log('🔧 Development mode - Auto-restart enabled');
    console.log('🌐 Frontend should connect to: http://localhost:' + PORT);
  }
});

module.exports = { app, server, io };`;

      fs.writeFileSync(serverPath, newServerContent);
      console.log('✅ server.js updated successfully');
    }

    // 2. Check if gameSocket.js needs updating
    console.log('\n🎮 Step 2: Checking gameSocket.js...');
    const gameSocketPath = 'routes/gameSocket.js';
    
    if (fs.existsSync(gameSocketPath)) {
      const gameSocketContent = fs.readFileSync(gameSocketPath, 'utf8');
      
      // Check if it exports a function (new version) or an object (old version)
      if (gameSocketContent.includes('module.exports = (io)') || gameSocketContent.includes('module.exports = function(io)')) {
        console.log('✅ gameSocket.js is already using the new format');
      } else {
        console.log('⚠️ gameSocket.js needs to be updated to the new format');
        console.log('   Please replace routes/gameSocket.js with the enhanced version');
      }
    } else {
      console.log('❌ gameSocket.js not found - please create it with the enhanced version');
    }

    // 3. Create the database update script if it doesn't exist
    console.log('\n📊 Step 3: Checking database update script...');
    const dbUpdatePath = 'update-database.js';
    
    if (!fs.existsSync(dbUpdatePath)) {
      console.log('✅ Creating update-database.js...');
      // You would put the database update script content here
      console.log('   Please create update-database.js with the database update script');
    } else {
      console.log('✅ update-database.js already exists');
    }

    console.log('\n🎉 File updates completed!');
    console.log('\n📋 Next steps:');
    console.log('1. Restart your server: Ctrl+C then npm run dev');
    console.log('2. Replace routes/gameSocket.js with the enhanced version');
    console.log('3. Update your frontend with the enhanced App.js and App.css');
    console.log('4. Run the database update: node update-database.js');

  } catch (error) {
    console.error('❌ Error updating files:', error);
    console.log('\n🔧 Manual steps needed:');
    console.log('1. Replace server.js with the fixed version');
    console.log('2. Replace routes/gameSocket.js with the enhanced version');
    console.log('3. Create update-database.js with the database update script');
  }
}

// Run the update
updateFiles().then(() => {
  console.log('\n🏁 File update script finished.');
}).catch((error) => {
  console.error('💥 Fatal error:', error);
  process.exit(1);
});